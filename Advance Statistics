{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "82bffb98",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline\n",
    "import scipy.stats as stats\n",
    "import statsmodels.stats.api as sm\n",
    "from scipy.stats import norm\n",
    "from scipy.stats import ttest_1samp,ttest_ind\n",
    "from statsmodels.formula.api import ols      # For n-way ANOVA\n",
    "from statsmodels.stats.anova import _get_covariance,anova_lm # For n-way ANOVA"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd114482",
   "metadata": {},
   "source": [
    "# Problem 1\n",
    "\n",
    "## A physiotherapist with a male football team is interested in studying the relationship between foot injuries and the positions at which the players play from the data collected."
   ]
  },
  {
   "attachments": {
    "Screenshot%202022-09-13%20213835.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "id": "6082e164",
   "metadata": {},
   "source": [
    "![Screenshot%202022-09-13%20213835.png](attachment:Screenshot%202022-09-13%20213835.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32f38e2f",
   "metadata": {},
   "source": [
    "### 1.1 What is the probability that a randomly chosen player would suffer an injury?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "217e03c8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The probability that a randomly chosen player would suffer an injury is 38.297872340425535%\n"
     ]
    }
   ],
   "source": [
    "PI = 90 # Total number of non-injured players.\n",
    "Total = 235 # Total number of players.\n",
    "\n",
    "P_I_ = PI/Total*100\n",
    "\n",
    "print('The probability that a randomly chosen player would suffer an injury is ', P_I_,'%',sep=\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e6f631f",
   "metadata": {},
   "source": [
    "### 1.2 What is the probability that a player is a forward or a winger?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7f5f7ad1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The probability that a player is a forward or a winger is 52.34042553191489%\n"
     ]
    }
   ],
   "source": [
    "F = 94 # Total number of forwards.\n",
    "W = 29 # Total number of winger.\n",
    "Total = 235 # Total number of players.\n",
    "\n",
    "FW = (F/Total + W/Total)*100\n",
    "\n",
    "print('The probability that a player is a forward or a winger is ', FW,'%',sep=\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98d694de",
   "metadata": {},
   "source": [
    "### 1.3 What is the probability that a randomly chosen player plays in a striker position and has a foot injury?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "296fe9db",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The probability that a randomly chosen player plays in a striker position and has a foot injury is 19.148936170212767%\n"
     ]
    }
   ],
   "source": [
    "SF = 45 # Total number of players who are playing the striker position with an injured foot.\n",
    "Total = 235 # Total number of players.\n",
    "\n",
    "SFI = SF/Total*100\n",
    "\n",
    "print('The probability that a randomly chosen player plays in a striker position and has a foot injury is ', SFI,'%',sep=\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8744e25e",
   "metadata": {},
   "source": [
    "### 1.4 What is the probability that a randomly chosen injured player is a striker?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d498db17",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The probability that a randomly chosen injured player is a striker is 31.03448275862069%\n"
     ]
    }
   ],
   "source": [
    "SF = 45 # Total number of strikers with injured foot.\n",
    "PI = 145 # Total number of injured players.\n",
    "\n",
    "SFPI = SF/PI*100\n",
    "\n",
    "print('The probability that a randomly chosen injured player is a striker is ', SFPI,'%',sep=\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2560ae6a",
   "metadata": {},
   "source": [
    "### 1.5 What is the probability that a randomly chosen injured player is either a forward or an attacking midfielder? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "237e7f7e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The probability that a randomly chosen injured player is a either a forward or an attacking midfielder is 55.172413793103445%\n"
     ]
    }
   ],
   "source": [
    "FI = 56 # Total number of forwards with injured foot.\n",
    "MI = 24 # Total number of attacking midfielders with injured foot.\n",
    "PI = 145 # Total number of injured players.\n",
    "\n",
    "FMPI = (FI + MI)/PI*100\n",
    "\n",
    "print('The probability that a randomly chosen injured player is a either a forward or an attacking midfielder is ', FMPI,'%',sep=\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "598ecf9b",
   "metadata": {},
   "source": [
    "# Problem 2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d79734d6",
   "metadata": {},
   "source": [
    "## An independent research organization is trying to estimate the probability that an accident at a nuclear power plant will result in radiation leakage. The types of accidents possible at the plant are, fire hazards, mechanical failure, or human error. The research organization also knows that two or more types of accidents cannot occur simultaneously.\n",
    "\n",
    "## According to the studies carried out by the organization, the probability of a radiation leak in case of a fire is 20%, the probability of a radiation leak in case of a mechanical 50%, and the probability of a radiation leak in case of a human error is 10%. The studies also showed the following;\n",
    "\n",
    "## The probability of a radiation leak occurring simultaneously with a fire is 0.1%.\n",
    "## The probability of a radiation leak occurring simultaneously with a mechanical failure is 0.15%.\n",
    "## The probability of a radiation leak occurring simultaneously with a human error is 0.12%."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e017a48d",
   "metadata": {},
   "source": [
    "### 2.1 What are the probabilities of a fire, a mechanical failure, and a human error respectively?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6dff27a7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The probability of a fire is 0.5%\n",
      "The probability of a mechanical failure is 0.3%\n",
      "The probability of a human error is 1.2%\n"
     ]
    }
   ],
   "source": [
    "# The probability of a radiation leak in case of a fire = a = 20% (20/100 = 0.2)\n",
    "# The probability of a radiation leak in case of a mechanical failure = b = 50% (50/100 = 0.5)\n",
    "# The probability of a radiation leak in case of a human error = c = 10% (10/100 = 0.1)\n",
    "# The probability of a radiation leak occurring simultaneously with a fire = d = 0.1% (0.1/100 = 0.001)\n",
    "# The probability of a radiation leak occurring simultaneously with a mechanical failure = e = 0.15% (0.15/100 = 0.0015)\n",
    "# The probability of a radiation leak occurring simultaneously with a human error = f = 0.12% (0.12/100 = 0.0012)\n",
    "\n",
    "a = 0.2 \n",
    "b = 0.5\n",
    "c = 0.1\n",
    "d = 0.001\n",
    "e = 0.0015\n",
    "f = 0.0012\n",
    "\n",
    "# The probability of fire = x\n",
    "x = d/a\n",
    "\n",
    "# The probability of mechanical failure = y\n",
    "y = e/b\n",
    "\n",
    "# The probability of human error = z\n",
    "z = f/c\n",
    "\n",
    "print('The probability of a fire is ',x*100,'%',sep=\"\")\n",
    "print('The probability of a mechanical failure is ',y*100,'%',sep=\"\")\n",
    "print('The probability of a human error is ',z*100,'%',sep=\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a52bea67",
   "metadata": {},
   "source": [
    "### 2.2 What is the probability of a radiation leak?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e7a759df",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The probability of a radiation leak is 0.37%\n"
     ]
    }
   ],
   "source": [
    "# The probability of a radiation leak occurring simultaneously with a fire = a = 0.1% (0.1/100 = 0.001)\n",
    "# The probability of a radiation leak occurring simultaneously with a mechanical failure = b = 0.15% (0.15/100 = 0.0015)\n",
    "# The probability of a radiation leak occurring simultaneously with a human error = c = 0.12% (0.12/100 = 0.0012)\n",
    "# Total probability = t = a+b+c\n",
    "\n",
    "a = 0.001\n",
    "b = 0.0015\n",
    "c = 0.0012\n",
    "t = a+b+c\n",
    "\n",
    "print('The probability of a radiation leak is ',t*100,'%',sep=\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3a152f7",
   "metadata": {},
   "source": [
    "### 2.3 Suppose there has been a radiation leak in the reactor for which the definite cause is not known. What is the probability that it has been caused by:\n",
    "\n",
    "### A Fire.\n",
    "### A Mechanical Failure.\n",
    "### A Human Error."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5e4a7c36",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The probability of a radiation leak caused by fire is 27.027027027027028%\n",
      "The probability of a radiation leak caused by mechanical failure is 40.54054054054054%\n",
      "The probability of a radiation leak caused by human error is 32.43243243243243%\n"
     ]
    }
   ],
   "source": [
    "# The probability of a radiation leak occurring simultaneously with a fire = a = 0.1% (0.1/100 = 0.001)\n",
    "# The probability of a radiation leak occurring simultaneously with a mechanical failure = b = 0.15% (0.15/100 = 0.0015)\n",
    "# The probability of a radiation leak occurring simultaneously with a human error = c = 0.12% (0.12/100 = 0.0012)\n",
    "# The probability of a radiation leak is 0.37% (0.37/100 = 0.0037) (Obtained from question 2.2)\n",
    "a = 0.001\n",
    "b = 0.0015\n",
    "c = 0.0012\n",
    "r = 0.0037\n",
    "\n",
    "# The probability of a radiation leak caused by fire = x\n",
    "x = a/r\n",
    "\n",
    "# The probability of a radiation leak caused by mechanical failure = y\n",
    "y = b/r\n",
    "\n",
    "# The probability of a radiation leak caused by human error = z\n",
    "z = c/r\n",
    "\n",
    "print('The probability of a radiation leak caused by fire is ',x*100,'%',sep=\"\")\n",
    "print('The probability of a radiation leak caused by mechanical failure is ',y*100,'%',sep=\"\")\n",
    "print('The probability of a radiation leak caused by human error is ',z*100,'%',sep=\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c8948df9",
   "metadata": {},
   "source": [
    "# Problem 3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "216b6bb1",
   "metadata": {},
   "source": [
    "## The breaking strength of gunny bags used for packaging cement is normally distributed with a mean of 5 kg per sq. centimeter and a standard deviation of 1.5 kg per sq. centimeter. The quality team of the cement company wants to know the following about the packaging material to better understand wastage or pilferage within the supply chain; Answer the questions below based on the given information; (Provide an appropriate visual representation of your answers, without which marks will be deducted)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fce938b1",
   "metadata": {},
   "source": [
    "### We have been given the following parameters:\n",
    "### Mean = mu = 5kg/sq.centimeter\n",
    "### Std.deviation = sd = 1.5kg/sq.centimeter"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44657dcf",
   "metadata": {},
   "source": [
    "### 3.1 What proportion of the gunny bags have a breaking strength less than 3.17 kg per sq cm?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "22ad4e4f",
   "metadata": {},
   "outputs": [],
   "source": [
    "mu = 5\n",
    "sd = 1.5\n",
    "x = 3.17\n",
    "z = (x-mu)/sd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "fdcc7bbe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = np.linspace(-4, 4, 100) \n",
    "plt.plot(x, norm.pdf(x, 0, 1)) \n",
    "plt.axvline(x = z, c = 'r') \n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "e4d1e89f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.1112"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "norm.cdf(3.17,loc=5,scale=1.5).round(4)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad9d640b",
   "metadata": {},
   "source": [
    "### 3.2 What proportion of the gunny bags have a breaking strength at least 3.6 kg per sq cm.?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f308bfcc",
   "metadata": {},
   "outputs": [],
   "source": [
    "mu = 5\n",
    "sd = 1.5\n",
    "x = 3.6\n",
    "z = (x-mu)/sd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a2453444",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = np.linspace(-4, 4, 100) \n",
    "plt.plot(x, norm.pdf(x, 0, 1)) \n",
    "plt.axvline(x = z, c = 'r') \n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c23bddcb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8247"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "1-norm.cdf(z).round(4)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66c2cfa2",
   "metadata": {},
   "source": [
    "### 3.3 What proportion of the gunny bags have a breaking strength between 5 and 5.5 kg per sq cm.?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "cc26f82f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0\n",
      "0.3333333333333333\n"
     ]
    }
   ],
   "source": [
    "mu = 5\n",
    "sd = 1.5\n",
    "x1 = 5\n",
    "x2 = 5.5\n",
    "z1 = (x1-mu)/sd\n",
    "z2 = (x2-mu)/sd\n",
    "print(z1)\n",
    "print(z2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "25744355",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = np.linspace(-4, 4, 100) \n",
    "plt.plot(x, norm.pdf(x, 0, 1))\n",
    "plt.fill_between(x=np.arange(0,0.33,0.01), \n",
    "                 y1= stats.norm.pdf(np.arange(0,0.33,0.01)), facecolor='blue');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d5057ec8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.1306"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(norm.cdf(z2) - norm.cdf(z1)).round(4)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2eb3bdae",
   "metadata": {},
   "source": [
    "### 3.4 What proportion of the gunny bags have a breaking strength NOT between 3 and 7.5 kg per sq cm.?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "5b51e5dc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-1.3333333333333333\n",
      "1.6666666666666667\n"
     ]
    }
   ],
   "source": [
    "mu = 5\n",
    "sd = 1.5\n",
    "x1 = 3\n",
    "x2 = 7.5\n",
    "z1 = (x1-mu)/sd\n",
    "z2 = (x2-mu)/sd\n",
    "print(z1)\n",
    "print(z2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "d2f1f947",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = np.linspace(-4, 4, 100) \n",
    "\n",
    "plt.plot(x, norm.pdf(x, 0, 1))\n",
    "\n",
    "plt.fill_between(x=np.arange(-4,-1.33,0.01), \n",
    "                 y1= stats.norm.pdf(np.arange(-4,-1.33,0.01)), facecolor='blue');\n",
    "\n",
    "plt.fill_between(x=np.arange(1.66,4,0.01), \n",
    "                 y1= stats.norm.pdf(np.arange(1.66,4,0.01)), facecolor='blue');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "dcf2cf1a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8609984280013174"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "common_area = (norm.cdf(z2)-norm.cdf(z1))\n",
    "common_area"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "c4a0ec51",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.139"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "1-common_area.round(4)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69a5dc29",
   "metadata": {},
   "source": [
    "# Problem 4"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2631a5c0",
   "metadata": {},
   "source": [
    "## Grades of the final examination in a training course are found to be normally distributed, with a mean of 77 and a standard deviation of 8.5. Based on the given information answer the questions below."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a7ce9d53",
   "metadata": {},
   "source": [
    "### We have been given the following parameters:\n",
    "### Mean = mu = 77\n",
    "### Std.deviation = sd = 8.5"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "928a71cc",
   "metadata": {},
   "source": [
    "### 4.1 What is the probability that a randomly chosen student gets a grade below 85 on this exam?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "8db0a95a",
   "metadata": {},
   "outputs": [],
   "source": [
    "mu = 77\n",
    "sd = 8.5\n",
    "x = 85\n",
    "z = (x-mu)/sd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "7d70c6be",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = np.linspace(-4,4,100)\n",
    "plt.plot(x,norm.pdf(x,0,1))\n",
    "plt.axvline(x=z,c='r')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "3f002702",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "82.66927837484748"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "norm.cdf(z)*100"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2eae91d7",
   "metadata": {},
   "source": [
    "### 4.2 What is the probability that a randomly selected student scores between 65 and 87?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "cd89c057",
   "metadata": {},
   "outputs": [],
   "source": [
    "mu = 77\n",
    "sd = 8.5\n",
    "x1 = 65\n",
    "x2 = 87\n",
    "z1 = (x1-mu)/sd\n",
    "z2 = (x2-mu)/sd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "9820d67a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = np.linspace(-4, 4, 100) \n",
    "plt.plot(x, norm.pdf(x, 0, 1))\n",
    "plt.fill_between(x=np.arange(-1.41,1.17,0.01), \n",
    "                 y1= stats.norm.pdf(np.arange(-1.41,1.17,0.01)), facecolor='blue');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "be906e1a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "80.12869336779059"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(norm.cdf(z2) - norm.cdf(z1))*100"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "724be1bf",
   "metadata": {},
   "source": [
    "### 4.3 What should be the passing cut-off so that 75% of the students clear the exam?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "4047acc8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The passing cut-off should be 82.73 so that 75% of the students can clear the exam.\n"
     ]
    }
   ],
   "source": [
    "score_top_75_percent = norm.ppf(0.75,77,8.5).round(2)\n",
    "print('The passing cut-off should be',score_top_75_percent,'so that 75% of the students can clear the exam.')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e077e72b",
   "metadata": {},
   "source": [
    "# Problem 5"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d905433",
   "metadata": {},
   "source": [
    "## Zingaro stone printing is a company that specializes in printing images or patterns on polished or unpolished stones. However, for the optimum level of printing of the image the stone surface has to have a Brinell's hardness index of at least 150. Recently, Zingaro has received a batch of polished and unpolished stones from its clients. Use the data provided to answer the following (assuming a 5% significance level);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "daa49382",
   "metadata": {},
   "source": [
    "### 5.1 Earlier experience of Zingaro with this particular client is favorable as the stone surface was found to be of adequate hardness. However, Zingaro has reason to believe now that the unpolished stones may not be suitable for printing. Do you think Zingaro is justified in thinking so?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "2a8c1551",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unpolished</th>\n",
       "      <th>Treated and Polished</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>164.481713</td>\n",
       "      <td>133.209393</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>154.307045</td>\n",
       "      <td>138.482771</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>129.861048</td>\n",
       "      <td>159.665201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>159.096184</td>\n",
       "      <td>145.663528</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>135.256748</td>\n",
       "      <td>136.789227</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unpolished   Treated and Polished\n",
       "0   164.481713            133.209393\n",
       "1   154.307045            138.482771\n",
       "2   129.861048            159.665201\n",
       "3   159.096184            145.663528\n",
       "4   135.256748            136.789227"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "zingaro = pd.read_csv('C:\\\\Users\\\\ABC\\\\Downloads\\\\Zingaro_Company.csv')\n",
    "zingaro.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "4a521c50",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The sample size for this problem is 75\n"
     ]
    }
   ],
   "source": [
    "print(\"The sample size for this problem is\",len(zingaro))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "d77d3d69",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "One sample t test \n",
      "t statistic: -4.164629601426758 p value: 4.1712869974196425e-05 \n"
     ]
    }
   ],
   "source": [
    "# one sample t-test\n",
    "# null hypothesis: expected value = 150\n",
    "t_statistic, p_value = ttest_1samp(zingaro['Unpolished '], 150)\n",
    "print('One sample t test \\nt statistic: {0} p value: {1} '.format(t_statistic, p_value/2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "cbd69baa",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Level of significance: 0.05\n",
      "We have evidence to reject the null hypothesis since p value < Level of significance\n",
      "Our one-sample t-test p-value= 4.1712869974196425e-05\n"
     ]
    }
   ],
   "source": [
    "# p_value < 0.05 > alternative hypothesis:\n",
    "\n",
    "alpha_value = 0.05 # Level of significance\n",
    "print('Level of significance: %.2f' %alpha_value)\n",
    "if p_value < alpha_value: \n",
    "    print('We have evidence to reject the null hypothesis since p value < Level of significance')\n",
    "else:\n",
    "    print('We have no evidence to reject the null hypothesis since p value > Level of significance') \n",
    "\n",
    "print (\"Our one-sample t-test p-value=\", p_value/2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a48323b",
   "metadata": {},
   "source": [
    "### 5.2 Is the mean hardness of the polished and unpolished stones the same?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "115faa0d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unpolished</th>\n",
       "      <th>Treated and Polished</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>164.481713</td>\n",
       "      <td>133.209393</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>154.307045</td>\n",
       "      <td>138.482771</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>129.861048</td>\n",
       "      <td>159.665201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>159.096184</td>\n",
       "      <td>145.663528</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>135.256748</td>\n",
       "      <td>136.789227</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unpolished   Treated and Polished\n",
       "0   164.481713            133.209393\n",
       "1   154.307045            138.482771\n",
       "2   129.861048            159.665201\n",
       "3   159.096184            145.663528\n",
       "4   135.256748            136.789227"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "zingaro = pd.read_csv('C:\\\\Users\\\\ABC\\\\Downloads\\\\Zingaro_Company.csv')\n",
    "zingaro.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "3602e19a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tstat -3.242232050141406\n",
      "P Value 0.001465515019462831\n"
     ]
    }
   ],
   "source": [
    "t_statistic, p_value  = ttest_ind(zingaro['Unpolished '],zingaro['Treated and Polished'])\n",
    "print('tstat',t_statistic)    \n",
    "print('P Value',p_value)    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "283c88e2",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "two-sample t-test p-value= 0.001465515019462831\n",
      "We have enough evidence to reject the null hypothesis in favour of alternative hypothesis\n",
      "We conclude that the mean hardness of the polished and unpolished stones are not same.\n"
     ]
    }
   ],
   "source": [
    "# p_value < 0.05 > alternative hypothesis:\n",
    "# they don't have the same mean at the 5% significance level\n",
    "print (\"Two-sample t-test p-value=\", p_value)\n",
    "\n",
    "alpha_level = 0.05\n",
    "\n",
    "if p_value < alpha_level:\n",
    "    print('We have enough evidence to reject the null hypothesis in favour of alternative hypothesis')\n",
    "    print('We conclude that the mean hardness of the polished and unpolished stones are not same.')\n",
    "else:\n",
    "    print('We do not have enough evidence to reject the null hypothesis in favour of alternative hypothesis')\n",
    "    print('We conclude that the mean hardness of the polished and unpolished stones are same.')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a84c0bb",
   "metadata": {},
   "source": [
    "# Problem 6"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "09420279",
   "metadata": {},
   "source": [
    "## Aquarius health club, one of the largest and most popular cross-fit gyms in the country has been advertising a rigorous program for body conditioning. The program is considered successful if the candidate is able to do more than 5 push-ups, as compared to when he/she enrolled in the program. Using the sample data provided can you conclude whether the program is successful? (Consider the level of Significance as 5%)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ed720c8",
   "metadata": {},
   "source": [
    "\n",
    "## Note that this is a problem of the paired-t-test. Since the claim is that the training will make a difference of more than 5, the null and alternative hypotheses must be formed accordingly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "6e136fd6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sr no.</th>\n",
       "      <th>Before</th>\n",
       "      <th>After</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>39</td>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>39</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>40</td>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Sr no.  Before  After\n",
       "0       1      39     44\n",
       "1       2      25     25\n",
       "2       3      39     39\n",
       "3       4       6     13\n",
       "4       5      40     44"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "aquarius = pd.read_csv('C:\\\\Users\\\\ABC\\\\Downloads\\\\Aquarius_gym.csv')\n",
    "aquarius.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "075c6e3b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tstat  -19.323\n",
      "p-value for one-tail: 1.1460209626255983e-35\n"
     ]
    }
   ],
   "source": [
    "# paired t-test: doing two measurments on the same experimental unit\n",
    "# e.g., before and after the program training\n",
    "t_statistic, p_value  =  stats.ttest_rel(aquarius['Before'],aquarius['After'])\n",
    "print('tstat  %1.3f' % t_statistic)    \n",
    "print(\"p-value for one-tail:\", p_value/2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "7d6926d6",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Paired two-sample t-test p-value= 1.1460209626255983e-35\n",
      "We have enough evidence to reject the null hypothesis in favour of alternative hypothesis\n"
     ]
    }
   ],
   "source": [
    "# p_value ≤ 0.05 > alternative hypothesis:\n",
    "# they don't have the same mean at the 5% significance level\n",
    "print (\"Paired two-sample t-test p-value=\", p_value/2)\n",
    "\n",
    "alpha_level = 0.01\n",
    "\n",
    "if (p_value/2) < alpha_level:\n",
    "    print('We have enough evidence to reject the null hypothesis in favour of alternative hypothesis')\n",
    "    \n",
    "else:\n",
    "    print('We do not have enough evidence to reject the null hypothesis in favour of alternative hypothesis')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c3d3686",
   "metadata": {},
   "source": [
    "# Problem 7"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ae90b66",
   "metadata": {},
   "source": [
    "## Dental implant data: The hardness of metal implant in dental cavities depends on multiple factors, such as the method of implant, the temperature at which the metal is treated, the alloy used as well as on the dentists who may favour one method above another and may work better in his/her favourite method. The response is the variable of interest."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "5ed02ac4",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Dentist</th>\n",
       "      <th>Method</th>\n",
       "      <th>Alloy</th>\n",
       "      <th>Temp</th>\n",
       "      <th>Response</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1500</td>\n",
       "      <td>813</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1600</td>\n",
       "      <td>792</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1700</td>\n",
       "      <td>792</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1500</td>\n",
       "      <td>907</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1600</td>\n",
       "      <td>792</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Dentist  Method  Alloy  Temp  Response\n",
       "0        1       1      1  1500       813\n",
       "1        1       1      1  1600       792\n",
       "2        1       1      1  1700       792\n",
       "3        1       1      2  1500       907\n",
       "4        1       1      2  1600       792"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_excel(r\"C:\\Users\\ABC\\Downloads\\Dental Hardness data.xlsx\", sheet_name = 'Data',engine='openpyxl')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "94b1dff5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Dentist</th>\n",
       "      <th>Method</th>\n",
       "      <th>Alloy</th>\n",
       "      <th>Temp</th>\n",
       "      <th>Response</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>90.000000</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>90.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>1600.000000</td>\n",
       "      <td>741.777778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.422136</td>\n",
       "      <td>0.821071</td>\n",
       "      <td>0.502801</td>\n",
       "      <td>82.107083</td>\n",
       "      <td>145.767845</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1500.000000</td>\n",
       "      <td>289.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1500.000000</td>\n",
       "      <td>698.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>1600.000000</td>\n",
       "      <td>767.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1700.000000</td>\n",
       "      <td>824.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1700.000000</td>\n",
       "      <td>1115.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Dentist     Method      Alloy         Temp     Response\n",
       "count  90.000000  90.000000  90.000000    90.000000    90.000000\n",
       "mean    3.000000   2.000000   1.500000  1600.000000   741.777778\n",
       "std     1.422136   0.821071   0.502801    82.107083   145.767845\n",
       "min     1.000000   1.000000   1.000000  1500.000000   289.000000\n",
       "25%     2.000000   1.000000   1.000000  1500.000000   698.000000\n",
       "50%     3.000000   2.000000   1.500000  1600.000000   767.000000\n",
       "75%     4.000000   3.000000   2.000000  1700.000000   824.000000\n",
       "max     5.000000   3.000000   2.000000  1700.000000  1115.000000"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "5d3c9f71",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Dentist     0\n",
       "Method      0\n",
       "Alloy       0\n",
       "Temp        0\n",
       "Response    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "0c1d1bed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(90, 5)"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "62fd5f76",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 90 entries, 0 to 89\n",
      "Data columns (total 5 columns):\n",
      " #   Column    Non-Null Count  Dtype\n",
      "---  ------    --------------  -----\n",
      " 0   Dentist   90 non-null     int64\n",
      " 1   Method    90 non-null     int64\n",
      " 2   Alloy     90 non-null     int64\n",
      " 3   Temp      90 non-null     int64\n",
      " 4   Response  90 non-null     int64\n",
      "dtypes: int64(5)\n",
      "memory usage: 3.6 KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "ee6e2f2f",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Dentist'] = pd.Categorical(df['Dentist'])\n",
    "df['Method'] = pd.Categorical(df['Method'])\n",
    "df['Alloy'] = pd.Categorical(df['Alloy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "214ba7f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "Dentist_1 = df[df['Dentist']==1]['Response']\n",
    "Dentist_2 = df[df['Dentist']==2]['Response']\n",
    "Dentist_3 = df[df['Dentist']==3]['Response']\n",
    "Dentist_4 = df[df['Dentist']==4]['Response']\n",
    "Dentist_5 = df[df['Dentist']==5]['Response']\n",
    "\n",
    "Method_1 = df[df['Method']==1]['Response']\n",
    "Method_2 = df[df['Method']==2]['Response']\n",
    "Method_3 = df[df['Method']==3]['Response']\n",
    "\n",
    "Alloy_1 = df[df['Alloy']==1]['Response']\n",
    "Alloy_2 = df[df['Alloy']==2]['Response']\n",
    "\n",
    "Temp_1 = df[df['Temp']==1500]['Response']\n",
    "Temp_2 = df[df['Temp']==1600]['Response']\n",
    "Temp_3 = df[df['Temp']==1700]['Response']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "6102e602",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ShapiroResult(statistic=0.9288936853408813, pvalue=0.18567493557929993)\n",
      "ShapiroResult(statistic=0.9665580987930298, pvalue=0.731051504611969)\n",
      "ShapiroResult(statistic=0.9573882818222046, pvalue=0.5520997643470764)\n",
      "ShapiroResult(statistic=0.8089414834976196, pvalue=0.002037214348092675)\n",
      "ShapiroResult(statistic=0.9546374082565308, pvalue=0.5022943019866943)\n",
      "ShapiroResult(statistic=0.9652422666549683, pvalue=0.4183872938156128)\n",
      "ShapiroResult(statistic=0.9371029138565063, pvalue=0.07601772248744965)\n",
      "ShapiroResult(statistic=0.9091950058937073, pvalue=0.014201578684151173)\n",
      "ShapiroResult(statistic=0.8304629921913147, pvalue=1.1945070582441986e-05)\n",
      "ShapiroResult(statistic=0.8877691626548767, pvalue=0.00040292771882377565)\n",
      "ShapiroResult(statistic=0.9178971648216248, pvalue=0.023663179948925972)\n",
      "ShapiroResult(statistic=0.9674428701400757, pvalue=0.47178611159324646)\n",
      "ShapiroResult(statistic=0.8211288452148438, pvalue=0.00016314408276230097)\n"
     ]
    }
   ],
   "source": [
    "from scipy import stats\n",
    "#The Shapiro-Wilk test tests the null hypothesis that the data was drawn from a normal distribution.\n",
    "#alpha = 0.05\n",
    "print(stats.shapiro([Dentist_1]))\n",
    "print(stats.shapiro([Dentist_2]))\n",
    "print(stats.shapiro([Dentist_3]))\n",
    "print(stats.shapiro([Dentist_4]))\n",
    "print(stats.shapiro([Dentist_5]))\n",
    "\n",
    "\n",
    "print(stats.shapiro([Method_1]))\n",
    "print(stats.shapiro([Method_2]))\n",
    "print(stats.shapiro([Method_3]))\n",
    "\n",
    "print(stats.shapiro([Alloy_1]))\n",
    "print(stats.shapiro([Alloy_2]))\n",
    "\n",
    "print(stats.shapiro([Temp_1]))\n",
    "print(stats.shapiro([Temp_2]))\n",
    "print(stats.shapiro([Temp_3]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "d33d65ba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AndersonResult(statistic=0.4074831699146024, critical_values=array([0.507, 0.578, 0.693, 0.808, 0.961]), significance_level=array([15. , 10. ,  5. ,  2.5,  1. ]))\n",
      "AndersonResult(statistic=0.1973933628729192, critical_values=array([0.507, 0.578, 0.693, 0.808, 0.961]), significance_level=array([15. , 10. ,  5. ,  2.5,  1. ]))\n",
      "AndersonResult(statistic=0.6737076308364944, critical_values=array([0.507, 0.578, 0.693, 0.808, 0.961]), significance_level=array([15. , 10. ,  5. ,  2.5,  1. ]))\n",
      "AndersonResult(statistic=0.7262587754808667, critical_values=array([0.507, 0.578, 0.693, 0.808, 0.961]), significance_level=array([15. , 10. ,  5. ,  2.5,  1. ]))\n",
      "AndersonResult(statistic=0.6459903332124934, critical_values=array([0.507, 0.578, 0.693, 0.808, 0.961]), significance_level=array([15. , 10. ,  5. ,  2.5,  1. ]))\n"
     ]
    }
   ],
   "source": [
    "#Anderson Darling Test if Shapiro fails\n",
    "print(stats.anderson(Dentist_1,dist='norm'))\n",
    "print(stats.anderson(Dentist_2,dist='norm'))\n",
    "print(stats.anderson(Dentist_3,dist='norm'))\n",
    "print(stats.anderson(Dentist_4,dist='norm'))\n",
    "print(stats.anderson(Dentist_5,dist='norm'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "49459757",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LeveneResult(statistic=3.7082282441933954, pvalue=0.007858817382355401)\n",
      "LeveneResult(statistic=5.848571977210466, pvalue=0.004138452940152019)\n",
      "LeveneResult(statistic=1.4194717470917784, pvalue=0.23669380462584474)\n",
      "LeveneResult(statistic=0.47058724898085974, pvalue=0.6262159309741129)\n"
     ]
    }
   ],
   "source": [
    "#Homogeniety\n",
    "#The Levene test tests the null hypothesis that all input samples are from populations with equal variances.\n",
    "#alpha = 0.05\n",
    "print(stats.levene(Dentist_1,Dentist_2,Dentist_3,Dentist_4,Dentist_5))\n",
    "print(stats.levene(Method_1,Method_2,Method_3))\n",
    "print(stats.levene(Alloy_1,Alloy_2))\n",
    "print(stats.levene(Temp_1,Temp_2,Temp_3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "6d466b26",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>df</th>\n",
       "      <th>sum_sq</th>\n",
       "      <th>mean_sq</th>\n",
       "      <th>F</th>\n",
       "      <th>PR(&gt;F)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>C(Dentist)</th>\n",
       "      <td>4.0</td>\n",
       "      <td>1.577946e+05</td>\n",
       "      <td>39448.638889</td>\n",
       "      <td>2.036077</td>\n",
       "      <td>0.096667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C(Alloy)</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.058155e+05</td>\n",
       "      <td>105815.511111</td>\n",
       "      <td>5.461494</td>\n",
       "      <td>0.021820</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Residual</th>\n",
       "      <td>84.0</td>\n",
       "      <td>1.627485e+06</td>\n",
       "      <td>19374.827249</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              df        sum_sq        mean_sq         F    PR(>F)\n",
       "C(Dentist)   4.0  1.577946e+05   39448.638889  2.036077  0.096667\n",
       "C(Alloy)     1.0  1.058155e+05  105815.511111  5.461494  0.021820\n",
       "Residual    84.0  1.627485e+06   19374.827249       NaN       NaN"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "formula = 'Response ~ C(Dentist) + C(Alloy)'\n",
    "model = ols(formula, df).fit()\n",
    "aov_table = anova_lm(model)\n",
    "(aov_table)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "660b3e76",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.pointplot(x='Dentist', y='Response', data=df, hue='Alloy');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "873201ae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.pointplot(x='Dentist', y='Response', data=df, hue='Alloy',ci=None);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bee7c74b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
